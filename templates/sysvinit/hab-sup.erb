#!/bin/sh

### BEGIN INIT INFO
# Provides:           <%= @name %>
# Required-Start:     $remote_fs $network
# Required-Stop:      $remote_fs $network
# Default-Start:      2 3 4 5
# Default-Stop:       0 1 6
# Short-Description:  The Habitat Supervisor
# Description:
#  Manages the Habitat supervisor process.
### END INIT INFO

PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

NAME=<%= @name %>
DESC="Habitat Supervisor"
HAB=/bin/hab
OPTIONS="<%= @exec_start_options %>"
PIDFILE=/var/run/$NAME.pid

. /lib/lsb/init-functions

if [ ! -x $HAB ]; then
  log_failure_msg "$HAB not present or not executable"
  exit 1
fi

pid() {
  pidofproc -p $PIDFILE
}

running() {
  start-stop-daemon --status --pidfile $PIDFILE
  return $?
}

start() {
  start-stop-daemon --start \
    --background \
    --pidfile $PIDFILE \
    --make-pidfile \
    --exec $HAB -- sup run $OPTIONS
  return $?
}

stop() {
  start-stop-daemon --stop --pidfile $PIDFILE
  return $?
}

case "$1" in
  start)
    <% if @auth_token %>
    log_daemon_msg "Setting HAB_AUTH_TOKEN for $DESC" "$NAME"
    export HAB_AUTH_TOKEN=<%= @auth_token %>
    <% end %>

    <% if @gateway_auth_token %>
    log_daemon_msg "Setting HAB_SUP_GATEWAY_AUTH_TOKEN for $DESC" "$NAME"
    export HAB_SUP_GATEWAY_AUTH_TOKEN=<%= @gateway_auth_token %>
    <% end %>

    log_daemon_msg "Starting $DESC" "$NAME"
    if running; then
      log_progress_msg "already running ($(pid))"
      log_end_msg 0
    else
      start
      resp=$?
      log_end_msg $resp
      [ $resp != 0 ] && exit $resp
    fi
    ;;
  stop)
    log_daemon_msg "Stopping $DESC" "$NAME"
    if running; then
      log_progress_msg "($(pid))"
      stop
      resp=$?
      log_end_msg $resp
      [ $resp != 0 ] && exit $resp
    else
      log_progress_msg "already stopped"
      log_end_msg 0
    fi
    ;;
  restart)
    log_daemon_msg "Restarting $DESC" "$NAME"
    if running; then
      stop
      resp=$?
      if [ $resp = 0 ]; then
        sleep 1
      else
        log_progress_msg "failed to stop"
        log_end_msg $resp
        exit $resp
      fi
    fi
    start
    resp=$?
    log_end_msg $resp
    [ $resp != 0 ] && exit $resp
    ;;
  status)
    status_of_proc -p "$PIDFILE" "$HAB" "$DESC"
    exit $?
    ;;
  *)
    echo "Usage: $0 $NAME {start|stop|restart|status}"
    exit 1
    ;;
esac

exit 0
